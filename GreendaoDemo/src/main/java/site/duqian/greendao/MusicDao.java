package site.duqian.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MUSIC".
*/
public class MusicDao extends AbstractDao<Music, Long> {

    public static final String TABLENAME = "MUSIC";

    /**
     * Properties of entity Music.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Music_id = new Property(1, String.class, "music_id", false, "MUSIC_ID");
        public final static Property Music_name = new Property(2, String.class, "music_name", false, "MUSIC_NAME");
        public final static Property Duration = new Property(3, int.class, "duration", false, "DURATION");
        public final static Property Res_url = new Property(4, String.class, "res_url", false, "RES_URL");
        public final static Property LocalPath = new Property(5, String.class, "localPath", false, "LOCAL_PATH");
        public final static Property AddTime = new Property(6, long.class, "addTime", false, "ADD_TIME");
    }


    public MusicDao(DaoConfig config) {
        super(config);
    }
    
    public MusicDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MUSIC\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MUSIC_ID\" TEXT NOT NULL UNIQUE ," + // 1: music_id
                "\"MUSIC_NAME\" TEXT," + // 2: music_name
                "\"DURATION\" INTEGER NOT NULL ," + // 3: duration
                "\"RES_URL\" TEXT," + // 4: res_url
                "\"LOCAL_PATH\" TEXT," + // 5: localPath
                "\"ADD_TIME\" INTEGER NOT NULL );"); // 6: addTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MUSIC\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Music entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getMusic_id());
 
        String music_name = entity.getMusic_name();
        if (music_name != null) {
            stmt.bindString(3, music_name);
        }
        stmt.bindLong(4, entity.getDuration());
 
        String res_url = entity.getRes_url();
        if (res_url != null) {
            stmt.bindString(5, res_url);
        }
 
        String localPath = entity.getLocalPath();
        if (localPath != null) {
            stmt.bindString(6, localPath);
        }
        stmt.bindLong(7, entity.getAddTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Music entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getMusic_id());
 
        String music_name = entity.getMusic_name();
        if (music_name != null) {
            stmt.bindString(3, music_name);
        }
        stmt.bindLong(4, entity.getDuration());
 
        String res_url = entity.getRes_url();
        if (res_url != null) {
            stmt.bindString(5, res_url);
        }
 
        String localPath = entity.getLocalPath();
        if (localPath != null) {
            stmt.bindString(6, localPath);
        }
        stmt.bindLong(7, entity.getAddTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Music readEntity(Cursor cursor, int offset) {
        Music entity = new Music( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // music_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // music_name
            cursor.getInt(offset + 3), // duration
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // res_url
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // localPath
            cursor.getLong(offset + 6) // addTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Music entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMusic_id(cursor.getString(offset + 1));
        entity.setMusic_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDuration(cursor.getInt(offset + 3));
        entity.setRes_url(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLocalPath(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAddTime(cursor.getLong(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Music entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Music entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Music entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
